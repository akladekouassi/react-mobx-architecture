{"version":3,"sources":["utilities/modelUtil.ts","utilities/apiUtil.ts","index.tsx","views/components/main-nav/components/MenuNavLink.tsx","views/components/main-nav/components/nav-search/NavSearch.tsx","views/components/main-nav/MainNav.tsx","constants/errorColorMap.ts","views/components/toast-card/ToastCard.tsx","views/components/toasts/Toasts.tsx","views/App.tsx","stores/shows/models/cast/PersonModel.ts","stores/shows/models/cast/CharacterModel.ts","stores/shows/models/cast/CastModel.ts","stores/shows/models/episodes/EpisodeModel.ts","stores/RootStore.ts","stores/shows/ShowsStore.ts","stores/toasts/ToastsStore.ts","views/components/loading-indicator/LoadingIndicator.module.scss","views/components/loading-indicator/LoadingIndicator.tsx","stores/shows/models/shows/CountryModel.ts","stores/shows/models/shows/NetworkModel.ts","stores/shows/models/shows/ShowModel.ts","views/components/main-nav/MainNav.module.scss","views/components/toasts/Toasts.module.scss","constants/RouteEnum.ts","stores/shows/models/ImageModel.ts","models/IResponseStatus.ts","environments/production.ts","environments/base.ts","constants/ToastStatus.ts","utilities/mobxUtil.ts","constants/RequestMethod.ts","utilities/miscUtil.ts","models/HttpErrorResponseModel.ts","utilities/http/fillInErrorWithDefaults.ts","utilities/http/httpResponseUtil.ts","utilities/http/httpRequestUtil.ts","utilities/http.ts"],"names":["createModels","Model","data","Array","isArray","map","json","responseToModels","effect","a","async","error","rootStore","MenuNavLink","props","exact","activeClassName","NavSearch","observer","history","useHistory","useState","searchTerm","setSearchTerm","onChangeInput","useCallback","event","value","onClickSearch","push","RouteEnum","Search","Form","onSubmit","Input","name","icon","placeholder","onChange","MainNav","hideSearchInput","useLocation","pathname","Segment","inverted","className","styles","wrapper","Menu","pointing","secondary","Item","as","to","Home","Episodes","About","errorColorMap","ToastStatus","Error","Warning","Success","ToastCard","toastsStore","item","onClickRemoveNotification","remove","id","buttonColor","useMemo","type","Card","Content","Header","content","Description","message","extra","Button","color","onClick","Toasts","items","length","model","key","HomePage","lazy","NotFoundPage","EpisodesPage","AboutPage","SearchPage","App","fallback","LoadingIndicator","isActive","path","component","PersonModel","birthday","image","ImageModel","update","BaseModel","CharacterModel","CastModel","person","character","self","voice","EpisodeModel","season","number","airdate","summary","RootStore","initialState","routingStore","RouterStore","showsStore","this","observable","currentShowId","show","initialResponseStatus","episodes","actors","errorExample","setCurrentShowId","showId","runInAction","requestShow","endpoint","environment","api","shows","replace","requestAction","status","http","get","ShowModel","requestEpisodes","requestCast","cast","requestError","isRequesting","some","Boolean","seasons","groupBy","Object","entries","models","title","rows","_createTableRows","episode","date","dayjs","format","medium","ShowsStore","add","uuid","toastId","filtered","filter","ToastsStore","configure","enforceActions","window","browserHistory","createBrowserHistory","basename","route","baseRoute","syncHistoryWithStore","rootEl","document","getElementById","Component","el","ReactDOM","render","module","exports","undefined","children","cssClasses","classNames","loaderContainer","active","size","CountryModel","code","timezone","NetworkModel","country","language","genres","network","original","defaultValue","env","baseApi","showsSearch","isProduction","isDevelopment","isTesting","productionEnv","callback","statusData","RequestMethod","isDefined","Function","prototype","t","HttpErrorResponseModel","errors","url","raw","fillInErrorWithDefaults","request","createResponseError","restRequest","response","statusText","hasOwnProperty","join","responseURL","config","axiosRequestConfig","method","headers","axios","axiosResponse","handleRequest","params","requestConfig","paramsConfig","Get","post","Post","put","Put","delete","Delete"],"mappings":"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","file":"static/js/main.9c22036e.chunk.js","sourcesContent":["import { Constructor } from '../definitions/Constructor';\nimport { FlattenIfArray } from '../definitions/FlattenIfArray';\n\nexport const createModels = <T>(Model: Constructor<FlattenIfArray<T>>, data: T) => {\n  return !Array.isArray(data) ? new Model(data) : (data.map((json) => new Model(json)) as any);\n};\n","import { Constructor } from '../definitions/Constructor';\nimport { FlattenIfArray } from '../definitions/FlattenIfArray';\nimport { APIResponse } from '../models/api';\nimport { createModels } from './modelUtil';\n\nexport const responseToModels = async <T>(effect: Promise<APIResponse<T>>, Model: Constructor<FlattenIfArray<T>>): Promise<APIResponse<T>> => {\n  const { data, error } = await effect;\n\n  return {\n    error,\n    data: data ? createModels(Model, data) : null,\n  };\n};\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport { App } from './views/App';\nimport environment from 'environment';\nimport { syncHistoryWithStore } from 'mobx-react-router';\nimport RootStore from './stores/RootStore';\nimport { configure } from 'mobx';\n\nconfigure({ enforceActions: 'always' }); // https://mobx.js.org/refguide/api.html#enforceactions\n\nexport let rootStore: RootStore;\n\n(async (window: Window): Promise<void> => {\n  const initialState: RecursivePartial<RootStore> = {\n    showsStore: {\n      currentShowId: '74',\n    },\n  };\n\n  rootStore = new RootStore(initialState);\n\n  const browserHistory = createBrowserHistory({ basename: environment.route.baseRoute });\n  const history = syncHistoryWithStore(browserHistory, rootStore.routingStore);\n\n  const rootEl: HTMLElement | null = document.getElementById('root');\n  const render = (Component: typeof App, el: HTMLElement | null): void => {\n    ReactDOM.render(<Component history={history} />, el);\n  };\n\n  render(App, rootEl);\n})(window);\n","import { NavLink, NavLinkProps } from 'react-router-dom';\nimport React from 'react';\n\nexport const MenuNavLink: React.FC<NavLinkProps> = (props) => {\n  return <NavLink exact={true} {...props} activeClassName=\"active\" />;\n};\n","// import styles from './NavSearch.module.scss';\n\nimport React, { useCallback, useState } from 'react';\nimport { Form, InputOnChangeData, FormProps } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\nimport { useHistory } from 'react-router-dom';\nimport { RouteEnum } from '../../../../../constants/RouteEnum';\n\ninterface IProps {}\n\nexport const NavSearch: React.FC<IProps> = observer((props) => {\n  const history = useHistory();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onChangeInput = useCallback((event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n    setSearchTerm(data.value);\n  }, []);\n  const onClickSearch = useCallback(\n    (event: React.FormEvent<HTMLFormElement>, data: FormProps) => {\n      history.push(`${RouteEnum.Search}?term=${searchTerm}`);\n\n      setSearchTerm('');\n    },\n    [history, searchTerm]\n  );\n\n  return (\n    <Form onSubmit={onClickSearch}>\n      <Form.Input\n        name=\"searchTerm\"\n        icon={{ name: 'search', icon: 'search' }}\n        placeholder=\"Search for Shows...\"\n        value={searchTerm}\n        onChange={onChangeInput}\n      />\n    </Form>\n  );\n});\n","import styles from './MainNav.module.scss';\n\nimport React from 'react';\nimport { Menu, Segment } from 'semantic-ui-react';\nimport { MenuNavLink } from './components/MenuNavLink';\nimport { RouteEnum } from '../../../constants/RouteEnum';\nimport { observer } from 'mobx-react';\nimport { useLocation } from 'react-router-dom';\nimport { NavSearch } from './components/nav-search/NavSearch';\n\ninterface IProps {}\n\nexport const MainNav: React.FC<IProps> = observer((props) => {\n  const location = useLocation();\n  const { pathname } = location;\n  const hideSearchInput = pathname !== RouteEnum.Search;\n\n  return (\n    <Segment inverted={true} className={styles.wrapper}>\n      <Menu inverted={true} pointing={true} secondary={true}>\n        <Menu.Item as={MenuNavLink} to={RouteEnum.Home} name=\"Home\" />\n        <Menu.Item as={MenuNavLink} to={RouteEnum.Episodes} name=\"Episodes\" />\n        <Menu.Item as={MenuNavLink} to={RouteEnum.About} name=\"About\" />\n      </Menu>\n      {hideSearchInput && <NavSearch />}\n    </Segment>\n  );\n});\n","import { ToastStatus } from './ToastStatus';\nimport { SemanticCOLORS } from 'semantic-ui-react';\n\nexport const errorColorMap: Record<ToastStatus, SemanticCOLORS> = {\n  [ToastStatus.Error]: 'red',\n  [ToastStatus.Warning]: 'orange',\n  [ToastStatus.Success]: 'green',\n};\n","// import styles from './ToastCard.module.scss';\n\nimport * as React from 'react';\nimport { Button, Card } from 'semantic-ui-react';\nimport IToast from '../../../stores/toasts/models/IToast';\nimport { observer } from 'mobx-react';\nimport { useCallback, useMemo } from 'react';\nimport { errorColorMap } from '../../../constants/errorColorMap';\nimport { rootStore } from '../../../index';\n\ninterface IProps {\n  readonly item: IToast;\n}\n\nexport const ToastCard: React.FC<IProps> = observer((props) => {\n  const { toastsStore } = rootStore;\n  const { item } = props;\n\n  const onClickRemoveNotification = useCallback(() => {\n    toastsStore.remove(item.id);\n  }, [item.id, toastsStore]);\n\n  const buttonColor = useMemo(() => errorColorMap[item.type], [item.type]);\n\n  return (\n    <Card>\n      <Card.Content>\n        <Card.Header content={item.type} />\n        <Card.Description content={item.message} />\n      </Card.Content>\n      <Card.Content extra={true}>\n        <Button color={buttonColor} onClick={onClickRemoveNotification}>\n          Close\n        </Button>\n      </Card.Content>\n    </Card>\n  );\n});\n","import styles from './Toasts.module.scss';\n\nimport React from 'react';\nimport IToast from '../../../stores/toasts/models/IToast';\nimport { ToastCard } from '../toast-card/ToastCard';\nimport { observer } from 'mobx-react';\nimport { rootStore } from '../../../index';\n\ninterface IProps {}\n\nexport const Toasts: React.FC<IProps> = observer((props) => {\n  const { toastsStore } = rootStore;\n  const { items } = toastsStore;\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {items.map((model: IToast) => (\n        <ToastCard key={model.id} item={model} />\n      ))}\n    </div>\n  );\n});\n","import React, { Suspense, lazy } from 'react';\nimport { History } from 'history';\nimport { Route, Switch, Router } from 'react-router-dom';\nimport { RouteEnum } from '../constants/RouteEnum';\nimport { MainNav } from './components/main-nav/MainNav';\nimport { LoadingIndicator } from './components/loading-indicator/LoadingIndicator';\nimport { Toasts } from './components/toasts/Toasts';\n\nconst HomePage = lazy(() => import('./home-page/HomePage'));\nconst NotFoundPage = lazy(() => import('./not-found-page/NotFoundPage'));\nconst EpisodesPage = lazy(() => import('./episodes-page/EpisodesPage'));\nconst AboutPage = lazy(() => import('./about-page/AboutPage'));\nconst SearchPage = lazy(() => import('./search-page/SearchPage'));\n\ninterface IProps {\n  readonly history: History;\n}\n\nexport const App: React.FC<IProps> = (props) => {\n  return (\n    <Router history={props.history}>\n      <Suspense fallback={<LoadingIndicator isActive={true} />}>\n        <MainNav />\n        <Switch>\n          <Route exact={true} path={RouteEnum.Home} component={HomePage} />\n          <Route path={RouteEnum.Episodes} component={EpisodesPage} />\n          <Route path={RouteEnum.About} component={AboutPage} />\n          <Route path={RouteEnum.Search} component={SearchPage} />\n          <Route component={NotFoundPage} />\n        </Switch>\n        <Toasts />\n      </Suspense>\n    </Router>\n  );\n};\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 10709,\n      \"url\": \"http://www.tvmaze.com/people/10709/anson-mount\",\n      \"name\": \"Anson Mount\",\n      \"country\": {\n        \"name\": \"United States\",\n        \"code\": \"US\",\n        \"timezone\": \"America/New_York\"\n      },\n      \"birthday\": \"1973-02-25\",\n      \"deathday\": null,\n      \"gender\": \"Male\",\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/2326.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/2326.jpg\"\n      },\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/people/10709\"\n        }\n      }\n    }\n */\nexport default class PersonModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly birthday: string = '';\n  public readonly image: ImageModel | null = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<PersonModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 11320,\n      \"url\": \"http://www.tvmaze.com/characters/11320/hell-on-wheels-cullen-bohannon\",\n      \"name\": \"Cullen Bohannon\",\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/3/9064.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/3/9064.jpg\"\n      },\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/characters/11320\"\n        }\n      }\n    }\n */\nexport default class CharacterModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly image: ImageModel | null = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<CharacterModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport PersonModel from './PersonModel';\nimport CharacterModel from './CharacterModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"person\": {},\n      \"character\": {},\n      \"self\": false,\n      \"voice\": false\n    }\n */\nexport default class CastModel extends BaseModel {\n  public readonly person: PersonModel = PersonModel as any;\n  public readonly character: CharacterModel = CharacterModel as any;\n  public readonly self: boolean = false;\n  public readonly voice: boolean = false;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<CastModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 4155,\n      \"url\": \"http://www.tvmaze.com/episodes/4155/hell-on-wheels-1x01-pilot\",\n      \"name\": \"Pilot\",\n      \"season\": 1,\n      \"number\": 1,\n      \"airdate\": \"2011-11-06\",\n      \"airtime\": \"22:00\",\n      \"airstamp\": \"2011-11-07T03:00:00+00:00\",\n      \"runtime\": 60,\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_landscape/9/22633.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/9/22633.jpg\"\n      },\n      \"summary\": \"<p>A Western about a former Confederate soldier (Anson Mount) and his quest for revenge on the Union troops who killed his wife. In the premiere episode, he heads west to take a job helping to construct the first transcontinental railroad.</p>\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/episodes/4155\"\n        }\n      }\n    }\n */\nexport default class EpisodeModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly season: number = 0;\n  public readonly number: number = 0;\n  public readonly name: string = '';\n  public readonly airdate: string = '';\n  public readonly image: ImageModel | null = ImageModel as any;\n  public readonly summary: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<EpisodeModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { ShowsStore } from './shows/ShowsStore';\nimport { ToastsStore } from './toasts/ToastsStore';\nimport { RouterStore } from 'mobx-react-router';\n\nexport default class RootStore {\n  readonly routingStore = new RouterStore();\n\n  readonly showsStore: ReturnType<typeof ShowsStore>;\n  readonly toastsStore: ReturnType<typeof ToastsStore>;\n\n  constructor(initialState: RecursivePartial<RootStore>) {\n    this.showsStore = ShowsStore(this, initialState.showsStore);\n    this.toastsStore = ToastsStore(this, initialState.toastsStore);\n  }\n}\n","import CastModel from './models/cast/CastModel';\nimport ShowModel from './models/shows/ShowModel';\nimport EpisodeModel from './models/episodes/EpisodeModel';\nimport environment from 'environment';\nimport groupBy from 'lodash.groupby';\nimport IEpisodeTable from './computed/IEpisodeTable';\nimport IEpisodeTableRow from './computed/IEpisodeTableRow';\nimport dayjs from 'dayjs';\nimport { initialResponseStatus } from '../../models/IResponseStatus';\nimport { requestAction } from '../../utilities/mobxUtil';\nimport RootStore from '../RootStore';\nimport { observable, runInAction } from 'mobx';\nimport http from '../../utilities/http';\nimport { responseToModels } from '../../utilities/apiUtil';\n\nexport const ShowsStore = (rootStore: RootStore, initialState: {} = {}) =>\n  observable({\n    currentShowId: '',\n    show: initialResponseStatus<ShowModel | null>(null),\n    episodes: initialResponseStatus<EpisodeModel[]>([]),\n    actors: initialResponseStatus<CastModel[]>([]),\n    errorExample: initialResponseStatus<null>(null),\n\n    ...initialState,\n\n    setCurrentShowId(showId: string) {\n      runInAction(() => {\n        this.currentShowId = showId;\n        // Clear out old data\n        this.show = initialResponseStatus(null);\n        this.episodes = initialResponseStatus([]);\n        this.actors = initialResponseStatus([]);\n      });\n    },\n\n    async requestShow() {\n      const endpoint = environment.api.shows.replace(':showId', this.currentShowId);\n\n      await requestAction((status) => {\n        this.show = { ...this.show, ...status };\n      }, responseToModels<ShowModel>(http.get(endpoint), ShowModel));\n    },\n\n    async requestEpisodes() {\n      const endpoint = environment.api.episodes.replace(':showId', this.currentShowId);\n\n      await requestAction((status) => {\n        this.episodes = { ...this.episodes, ...status };\n      }, responseToModels<EpisodeModel[]>(http.get(endpoint), EpisodeModel));\n    },\n\n    async requestCast() {\n      const endpoint = environment.api.cast.replace(':showId', this.currentShowId);\n\n      await requestAction((status) => {\n        this.actors = { ...this.actors, ...status };\n      }, responseToModels<CastModel[]>(http.get(endpoint), CastModel));\n    },\n\n    /**\n     * This is only to trigger an error api response so we can use it for an example in the AboutPage\n     */\n    async requestError() {\n      const endpoint = environment.api.errorExample;\n\n      await requestAction((status) => {\n        this.errorExample = {\n          ...status,\n          data: status.data || null,\n        };\n      }, http.get<null>(endpoint));\n    },\n\n    get isRequestingShowAndCast(): boolean {\n      const { isRequesting: isRequestingCast } = this.actors;\n      const { isRequesting: isRequestingShow } = this.show;\n\n      return [isRequestingCast, isRequestingShow].some(Boolean);\n    },\n\n    get selectEpisodes() {\n      const seasons: { [season: string]: EpisodeModel[] } = groupBy(this.episodes.data, 'season');\n\n      return Object.entries(seasons).map(\n        ([season, models]): IEpisodeTable => {\n          return {\n            title: `Season ${season}`,\n            rows: this._createTableRows(models),\n          };\n        }\n      );\n    },\n\n    _createTableRows(models: EpisodeModel[]) {\n      return models.map(\n        (model): IEpisodeTableRow => ({\n          episode: model.number,\n          name: model.name,\n          date: dayjs(model.airdate).format('MMM D, YYYY'),\n          image: model.image?.medium ?? '',\n        })\n      );\n    },\n  });\n","import { observable, runInAction } from 'mobx';\nimport IToast from './models/IToast';\nimport { ToastStatus } from '../../constants/ToastStatus';\nimport uuid from 'uuid/v4';\nimport RootStore from '../RootStore';\n\nexport const ToastsStore = (rootStore: RootStore, initialState: {} = {}) =>\n  observable({\n    items: [] as IToast[],\n\n    ...initialState,\n\n    add(message: string, type: ToastStatus) {\n      const item: IToast = {\n        message,\n        type,\n        id: uuid(),\n      };\n\n      runInAction(() => this.items.push(item));\n    },\n\n    remove(toastId: string) {\n      const filtered = this.items.filter((model: IToast) => model.id !== toastId);\n\n      runInAction(() => (this.items = filtered));\n    },\n  });\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoadingIndicator_wrapper__3M33C\",\"loaderContainer\":\"LoadingIndicator_loaderContainer__A450d\"};","import styles from './LoadingIndicator.module.scss';\n\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from 'semantic-ui-react';\n\ninterface IProps {\n  readonly isActive?: boolean;\n  readonly className?: string;\n}\nexport const LoadingIndicator: React.FC<IProps> = (props) => {\n  const { isActive = false, className = undefined, children } = props;\n  const cssClasses = useMemo(() => classNames(className, { [styles.wrapper]: isActive }), [className, isActive]);\n\n  return (\n    <div className={cssClasses}>\n      {isActive && (\n        <div className={styles.loaderContainer}>\n          <Loader content=\"Loading\" active={true} inverted={true} size=\"huge\" />\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n","import { BaseModel } from 'sjs-base-model';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"name\": \"United States\",\n      \"code\": \"US\",\n      \"timezone\": \"America/New_York\"\n    }\n */\nexport default class CountryModel extends BaseModel {\n  public readonly name: string = '';\n  public readonly code: string = '';\n  public readonly timezone: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<CountryModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport CountryModel from './CountryModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 20,\n      \"name\": \"AMC\",\n      \"country\": {\n        \"name\": \"United States\",\n        \"code\": \"US\",\n        \"timezone\": \"America/New_York\"\n      }\n    }\n */\nexport default class NetworkModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly country: CountryModel = CountryModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<NetworkModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport NetworkModel from './NetworkModel';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 74,\n      \"url\": \"http://www.tvmaze.com/shows/74/hell-on-wheels\",\n      \"name\": \"Hell on Wheels\",\n      \"type\": \"Scripted\",\n      \"language\": \"English\",\n      \"genres\": [\n        \"Drama\",\n        \"Action\",\n        \"Western\"\n      ],\n      \"status\": \"Ended\",\n      \"runtime\": 60,\n      \"premiered\": \"2011-11-06\",\n      \"officialSite\": \"http://www.amctv.com/shows/hell-on-wheels\",\n      \"schedule\": {\n        \"time\": \"21:00\",\n        \"days\": [\n          \"Saturday\"\n        ]\n      },\n      \"rating\": {\n        \"average\": 8.5\n      },\n      \"weight\": 82,\n      \"network\": {\n        \"id\": 20,\n        \"name\": \"AMC\",\n        \"country\": {\n          \"name\": \"United States\",\n          \"code\": \"US\",\n          \"timezone\": \"America/New_York\"\n        }\n      },\n      \"webChannel\": null,\n      \"externals\": {\n        \"tvrage\": 27195,\n        \"thetvdb\": 212961,\n        \"imdb\": \"tt1699748\"\n      },\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/526.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/526.jpg\"\n      },\n      \"summary\": \"<p><b>Hell on Wheels</b> is an American Western television series about the construction of the First Transcontinental Railroad across the United States. The series follows the Union Pacific Railroad and its surveyors, laborers, prostitutes, mercenaries, and others who lived, worked and died in the mobile encampment called \\\"Hell on Wheels\\\" that followed the railhead west across the Great Plains. In particular, the story focuses on Cullen Bohannon, a former Confederate soldier who, while working as foreman and chief engineer on the railroad, initially attempts to track down the Union soldiers who murdered his wife and young son during the American Civil War.</p>\",\n      \"updated\": 1560886410,\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/shows/74\"\n        },\n        \"previousepisode\": {\n          \"href\": \"http://api.tvmaze.com/episodes/862325\"\n        }\n      }\n    }\n */\nexport default class ShowModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly language: string = '';\n  public readonly summary: string = '';\n  public readonly genres: string[] = [];\n  public readonly network: NetworkModel = NetworkModel as any;\n  public readonly image: ImageModel | null = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<ShowModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainNav_wrapper__2YWHB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Toasts_wrapper__17gGv\"};","export enum RouteEnum {\n  Home = '/',\n  Episodes = '/episodes',\n  About = '/about',\n  Search = '/search',\n}\n","import { BaseModel } from 'sjs-base-model';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/526.jpg\",\n      \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/526.jpg\"\n    }\n */\nexport default class ImageModel extends BaseModel {\n  public readonly medium: string = '';\n  public readonly original: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: RecursivePartial<ImageModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import HttpErrorResponseModel from './HttpErrorResponseModel';\n\nexport interface IResponseStatus<T> {\n  isRequesting: boolean;\n  data: T;\n  error?: HttpErrorResponseModel;\n}\nexport type UnknownResponseStatus<T> = Optional<IResponseStatus<T>, 'error' | 'data'>;\n\nexport const initialResponseStatus = <T>(defaultValue: T): IResponseStatus<T> => ({\n  isRequesting: false,\n  data: defaultValue,\n});\n","import environment, { Environment } from './base';\n\n/*\n * base.ts is the default environment for production.\n * You shouldn't have override anything.\n */\n\nconst baseApi = 'https://api.tvmaze.com';\nconst env = environment(baseApi);\n\nconst productionEnv: Environment = {\n  ...env,\n  route: {\n    ...env.route,\n    baseRoute: '/react-mobx-architecture', // Fixes issue with Github Pages\n  },\n};\n\nexport default productionEnv;\n","/*\n * Base is the default environment for production.\n * Add everything here and override value in other files if needed.\n * https://blog.usejournal.com/my-awesome-custom-react-environment-variables-setup-8ebb0797d8ac\n */\nexport default function baseEnv(baseApi: string) {\n  return {\n    route: {\n      baseRoute: '',\n    },\n    api: {\n      cast: `${baseApi}/shows/:showId/cast`,\n      episodes: `${baseApi}/shows/:showId/episodes`,\n      shows: `${baseApi}/shows/:showId`,\n      showsSearch: `${baseApi}/search/shows?q=:searchTerm`,\n      errorExample: 'https://httpstat.us/520',\n    },\n    isProduction: true,\n    isDevelopment: false,\n    isTesting: false,\n  };\n}\n\nexport type Environment = ReturnType<typeof baseEnv>;\n","export enum ToastStatus {\n  Error = 'error',\n  Warning = 'warning',\n  Success = 'success',\n}\n","import { UnknownResponseStatus } from '../models/IResponseStatus';\nimport { APIResponse } from '../models/api';\nimport { runInAction } from 'mobx';\nimport { ToastStatus } from '../constants/ToastStatus';\nimport { rootStore } from '../index';\n\nexport const requestAction = async <T>(\n  callback: (status: UnknownResponseStatus<T>) => void,\n  effect: Promise<APIResponse<T>>\n): Promise<UnknownResponseStatus<T>> => {\n  let statusData: UnknownResponseStatus<T> = {\n    isRequesting: true,\n  };\n\n  runInAction(() => callback(statusData));\n\n  const { data, error } = await effect;\n\n  statusData = {\n    isRequesting: false,\n  };\n\n  if (error) {\n    statusData.error = error;\n\n    rootStore.toastsStore.add(error.message, ToastStatus.Error);\n  } else {\n    statusData.data = data!;\n  }\n\n  runInAction(() => callback(statusData));\n\n  return statusData;\n};\n","export enum RequestMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Delete = 'DELETE',\n  Options = 'OPTIONS',\n  Head = 'HEAD',\n  Patch = 'PATCH',\n}\n","// A function that performs no operations.\nexport const noop = Function.prototype as () => void;\n\nexport const isDefined = <T>(t: T | null | undefined): t is T => t != null;\n\nexport const uniq = <T>(array: T[]) => Array.from(new Set(array));\n\nexport const delay = (duration = 250) => new Promise((resolve) => setTimeout(resolve, duration));\n","import uuid from 'uuid/v4';\nimport IError from './IError';\nimport { BaseModel } from 'sjs-base-model';\n\nexport default class HttpErrorResponseModel extends BaseModel implements IError {\n  readonly id: string = uuid();\n  status: number = 0;\n  message: string = '';\n  errors: string[] = [];\n  url: string = '';\n  raw: any = null;\n\n  constructor(data: RecursivePartial<HttpErrorResponseModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import HttpErrorResponseModel from '../../models/HttpErrorResponseModel';\nimport { isDefined } from '../miscUtil';\n\nexport const fillInErrorWithDefaults = (error: Partial<HttpErrorResponseModel>, request: Partial<Request>): HttpErrorResponseModel => {\n  const errors = error.errors!.length ? error.errors! : ['Error requesting data'];\n\n  return new HttpErrorResponseModel({\n    status: error.status || 0,\n    message: error.message || 'Error requesting data',\n    url: error.url || request.url!,\n    raw: error.raw,\n    // Remove anything with undefined or empty strings.\n    errors: errors.filter(isDefined),\n  });\n};\n","import { isDefined } from '../miscUtil';\nimport { fillInErrorWithDefaults } from './fillInErrorWithDefaults';\n\nexport const createResponseError = (error: any, restRequest: Partial<Request>) => {\n  if (error.response) {\n    // The request was made and the server responded with a status code that falls out of the range of 2xx\n    const { status, statusText, data } = error.response;\n    const errors: string[] = data.hasOwnProperty('errors') ? [statusText, ...data.errors] : [statusText];\n\n    return fillInErrorWithDefaults(\n      {\n        status,\n        message: errors.filter(isDefined).join(' - '),\n        errors,\n        url: error.request.responseURL,\n        raw: error.response,\n      },\n      restRequest\n    );\n  } else if (error.request) {\n    // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js\n    const { status, statusText, responseURL } = error.request;\n\n    return fillInErrorWithDefaults(\n      {\n        status,\n        message: statusText,\n        errors: [statusText],\n        url: responseURL,\n        raw: error.request,\n      },\n      restRequest\n    );\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    return fillInErrorWithDefaults(\n      {\n        status: 0,\n        message: error.message,\n        errors: [error.message],\n        url: restRequest.url!,\n        raw: error,\n      },\n      restRequest\n    );\n  }\n};\n","import axios, { AxiosRequestConfig, AxiosResponse, Method } from 'axios';\nimport { APIResponse } from '../../models/api';\nimport { createResponseError } from './httpResponseUtil';\n\nexport const request = async <T>(restRequest: Partial<Request>, config?: AxiosRequestConfig) => {\n  const axiosRequestConfig: AxiosRequestConfig = {\n    ...config,\n    method: restRequest.method as Method,\n    url: restRequest.url,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      ...config?.headers,\n    },\n  };\n  const axiosResponse: AxiosResponse<T> = await axios(axiosRequestConfig);\n\n  return axiosResponse.data;\n};\n\nexport const handleRequest = async <T, E>(restRequest: Partial<Request>, config?: AxiosRequestConfig): Promise<APIResponse<T, E>> => {\n  try {\n    const data = await request<T>(restRequest, config);\n\n    return { data };\n  } catch (error) {\n    return { error: createResponseError(error, restRequest) };\n  }\n};\n","import { AxiosRequestConfig } from 'axios';\nimport { handleRequest } from './http/httpRequestUtil';\nimport { RequestMethod } from '../constants/RequestMethod';\n\nconst get = async <T, P = any, E = null>(endpoint: string, params?: P, requestConfig?: AxiosRequestConfig) => {\n  const paramsConfig: AxiosRequestConfig | undefined = params ? { params } : undefined;\n\n  return handleRequest<T, E>(\n    {\n      url: endpoint,\n      method: RequestMethod.Get,\n    },\n    {\n      ...paramsConfig,\n      ...requestConfig,\n    }\n  );\n};\n\nconst post = async <T, E = null>(endpoint: string, data?: any) => {\n  const config: AxiosRequestConfig | undefined = data ? { data } : undefined;\n\n  return handleRequest<T, E>(\n    {\n      url: endpoint,\n      method: RequestMethod.Post,\n    },\n    config\n  );\n};\n\nconst put = async <T, E = null>(endpoint: string, data?: any) => {\n  const config: AxiosRequestConfig | undefined = data ? { data } : undefined;\n\n  return handleRequest<T, E>(\n    {\n      url: endpoint,\n      method: RequestMethod.Put,\n    },\n    config\n  );\n};\n\nconst deleteRequest = async <T, E = null>(endpoint: string) => {\n  return handleRequest<T, E>({\n    url: endpoint,\n    method: RequestMethod.Delete,\n  });\n};\n\nexport default {\n  get,\n  post,\n  put,\n  delete: deleteRequest,\n};\n"],"sourceRoot":""}