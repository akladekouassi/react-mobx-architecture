{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Header/HeaderSubheader.js","../node_modules/semantic-ui-react/dist/es/elements/Header/HeaderContent.js","../node_modules/semantic-ui-react/dist/es/elements/Header/Header.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js","views/episodes-page/components/episodes-table-row/EpisodesTableRow.tsx","views/episodes-page/components/episodes-table/EpisodesTable.tsx","views/episodes-page/EpisodesPage.tsx"],"names":["HeaderSubheader","props","children","className","content","classes","cx","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","create","createShorthandFactory","HeaderContent","Header","attached","block","color","disabled","dividing","floated","icon","image","inverted","size","sub","subheader","textAlign","useKeyOnly","useValueAndKey","useKeyOrValueAndKey","useTextAlignProp","iconElement","Icon","autoGenerateKey","imageElement","Image","subheaderElement","Content","Subheader","TableBody","defaultProps","as","TableCell","active","collapsing","error","negative","positive","selectable","singleLine","verticalAlign","warning","width","useVerticalAlignProp","useWidthProp","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","TableRow","cellAs","cells","_map","cell","Table","basic","celled","columns","compact","definition","fixed","footerRow","headerRow","headerRows","padded","renderBodyRow","sortable","stackable","striped","structured","tableData","unstackable","headerShorthandOptions","headerElement","data","index","Body","Cell","Footer","HeaderCell","Row","EpisodesTableRow","rowData","key","episode","src","rounded","date","name","EpisodesTable","title","rows","map","model","EpisodesPage","observer","showsStore","rootStore","useEffect","requestEpisodes","isRequesting","episodes","episodeTables","selectEpisodes","LoadingIndicator","isActive"],"mappings":"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","file":"static/js/7.f2c22eb8.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * Headers may contain subheaders.\n */\n\nfunction HeaderSubheader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('sub header', className);\n  var rest = getUnhandledProps(HeaderSubheader, props);\n  var ElementType = getElementType(HeaderSubheader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nHeaderSubheader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nHeaderSubheader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nHeaderSubheader.create = createShorthandFactory(HeaderSubheader, function (content) {\n  return {\n    content: content\n  };\n});\nexport default HeaderSubheader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * Header content wraps the main content when there is an adjacent Icon or Image.\n */\n\nfunction HeaderContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(HeaderContent, props);\n  var ElementType = getElementType(HeaderContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nHeaderContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nHeaderContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default HeaderContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useValueAndKey, useTextAlignProp, useKeyOrValueAndKey, useKeyOnly } from '../../lib';\nimport Icon from '../Icon';\nimport Image from '../Image';\nimport HeaderSubheader from './HeaderSubheader';\nimport HeaderContent from './HeaderContent';\n/**\n * A header provides a short summary of content\n */\n\nfunction Header(props) {\n  var attached = props.attached,\n      block = props.block,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      disabled = props.disabled,\n      dividing = props.dividing,\n      floated = props.floated,\n      icon = props.icon,\n      image = props.image,\n      inverted = props.inverted,\n      size = props.size,\n      sub = props.sub,\n      subheader = props.subheader,\n      textAlign = props.textAlign;\n  var classes = cx('ui', color, size, useKeyOnly(block, 'block'), useKeyOnly(disabled, 'disabled'), useKeyOnly(dividing, 'dividing'), useValueAndKey(floated, 'floated'), useKeyOnly(icon === true, 'icon'), useKeyOnly(image === true, 'image'), useKeyOnly(inverted, 'inverted'), useKeyOnly(sub, 'sub'), useKeyOrValueAndKey(attached, 'attached'), useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(Header, props);\n  var ElementType = getElementType(Header, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var iconElement = Icon.create(icon, {\n    autoGenerateKey: false\n  });\n  var imageElement = Image.create(image, {\n    autoGenerateKey: false\n  });\n  var subheaderElement = HeaderSubheader.create(subheader, {\n    autoGenerateKey: false\n  });\n\n  if (iconElement || imageElement) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), iconElement || imageElement, (content || subheaderElement) && React.createElement(HeaderContent, null, content, subheaderElement));\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content, subheaderElement);\n}\n\nHeader.handledProps = [\"as\", \"attached\", \"block\", \"children\", \"className\", \"color\", \"content\", \"disabled\", \"dividing\", \"floated\", \"icon\", \"image\", \"inverted\", \"size\", \"sub\", \"subheader\", \"textAlign\"];\nHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach header  to other content, like a segment. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** Format header to appear inside a content block. */\n  block: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Color of the header. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Show that the header is inactive. */\n  disabled: PropTypes.bool,\n\n  /** Divide header from the content below it. */\n  dividing: PropTypes.bool,\n\n  /** Header can sit to the left or right of other content. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** Add an icon by icon name or pass an Icon. */\n  icon: customPropTypes.every([customPropTypes.disallow(['image']), PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand])]),\n\n  /** Add an image by img src or pass an Image. */\n  image: customPropTypes.every([customPropTypes.disallow(['icon']), PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand])]),\n\n  /** Inverts the color of the header for dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Content headings are sized with em and are based on the font-size of their container. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'mini')),\n\n  /** Headers may be formatted to label smaller or de-emphasized content. */\n  sub: PropTypes.bool,\n\n  /** Shorthand for Header.Subheader. */\n  subheader: customPropTypes.itemShorthand,\n\n  /** Align header content. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nHeader.Content = HeaderContent;\nHeader.Subheader = HeaderSubheader;\nexport default Header;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;","import React from 'react';\nimport { Image, Table } from 'semantic-ui-react';\nimport IEpisodeTableRow from '../../../../stores/shows/computed/IEpisodeTableRow';\n\ninterface IProps {\n  readonly rowData: IEpisodeTableRow;\n}\n\nexport const EpisodesTableRow: React.FC<IProps> = (props) => {\n  const { rowData } = props;\n\n  return (\n    <Table.Row key={rowData.episode}>\n      <Table.Cell>\n        <Image src={rowData.image} rounded={true} size=\"small\" />\n      </Table.Cell>\n      <Table.Cell>{rowData.episode}</Table.Cell>\n      <Table.Cell>{rowData.date}</Table.Cell>\n      <Table.Cell>{rowData.name}</Table.Cell>\n    </Table.Row>\n  );\n};\n","import React from 'react';\nimport { Header, Table } from 'semantic-ui-react';\nimport { EpisodesTableRow } from '../episodes-table-row/EpisodesTableRow';\nimport IEpisodeTable from '../../../../stores/shows/computed/IEpisodeTable';\nimport IEpisodeTableRow from '../../../../stores/shows/computed/IEpisodeTableRow';\n\ninterface IProps {\n  readonly tableData: IEpisodeTable;\n}\n\nexport const EpisodesTable: React.FC<IProps> = (props) => {\n  const { tableData } = props;\n\n  return (\n    <div key={tableData.title}>\n      <Header as=\"h2\">{tableData.title}</Header>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell width={1}>Scene</Table.HeaderCell>\n            <Table.HeaderCell>Episode</Table.HeaderCell>\n            <Table.HeaderCell>Date</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {tableData.rows.map((model: IEpisodeTableRow) => (\n            <EpisodesTableRow key={model.episode} rowData={model} />\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport IEpisodeTable from '../../stores/shows/computed/IEpisodeTable';\nimport { LoadingIndicator } from '../components/loading-indicator/LoadingIndicator';\nimport { EpisodesTable } from './components/episodes-table/EpisodesTable';\nimport { observer } from 'mobx-react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { rootStore } from '../../index';\n\ninterface IRouteParams {}\ninterface IProps extends RouteComponentProps<IRouteParams> {}\n\nconst EpisodesPage: React.FC<IProps> = observer((props) => {\n  const { showsStore } = rootStore;\n\n  useEffect(() => {\n    showsStore.requestEpisodes();\n  }, [showsStore]);\n\n  const { isRequesting } = showsStore.episodes;\n  const episodeTables = showsStore.selectEpisodes;\n\n  return (\n    <>\n      <LoadingIndicator isActive={isRequesting} />\n      {episodeTables.map((model: IEpisodeTable) => (\n        <EpisodesTable key={model.title} tableData={model} />\n      ))}\n    </>\n  );\n});\n\nexport default EpisodesPage;\n"],"sourceRoot":""}